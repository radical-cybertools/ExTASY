#!/bin/bash

#PBS -V
#PBS -o pbs.log
#PBS -j oe
#PBS -r n

#PBS -N dJDOgK
#PBS -q parallel
#PBS -l walltime=00:10:00
#PBS -l nodes=2:ppn=128

set -e

nthreads=64

PBS_O_WORKDIR=/home/vb17/run


tmpdir=$PBS_O_WORKDIR/tmp # temporary directory when running parallel MD simulations (copy it anywhere else than scratch directory for better performances/)

# parameters files
prmfile=parameters

cd $PBS_O_WORKDIR
source $prmfile

# files involved in MD simulations
ingro=input.gro # input file of MD simulation (includes all configurations in a row)
tmpgro=tmp.gro # temporary output file of MD simulation (includes all configurations in a row)
outgro=output.gro # output file of MD simulation after the selecting step

# files involved LSDMap
xyzfile=${sys}.xyz # input file for lsdmap computation (generate using gro2xyz with $tmpgro)
dcfile=${xyzfile}_dif.ev # file containing the diffusion coordinates of every configuration of $xyzfile 
nnfile=${sys}.nn # Nearest Neighbor file generated automatically by p_rmsd_neighbor and used for the selection step
epsfile_w=${xyzfile}_eps_w
epsfile=${xyzfile}_eps
epsfile_cste=${xyzfile}_eps_cste

# files involved in selection step and reweighting
ncfile=${sys}.nc # number of clones files listing the number of clones that should be made for every configuation (output of the selecting step)
wfile=${sys}.w # weight file listing the weights of every configuration
tmpwfile=${sys}_tmp.w # tmp weight file

results_dir=results
logfile=$results_dir/run.log
results_txt=results.txt

rnnew -f $results_dir
mkdir $results_dir

if [ $recovery -eq 0 ]; then 
  recovery_flag=
  rm -rf $ingro
  for idx in `seq 1 $nruns`; do
  cat $startgro >> $ingro
  done
  sed -i 's/status_lsdmap=.*/status_lsdmap=0/g' $lsdm_prmfile
elif [ $recovery -eq 1 ]; then 
  recovery_flag=--recovery
  # check for .gro input file
  if [ ! -f "$ingro" ]; then
    echo "###ERROR: Recovery is asked (file $prmfile) but .gro input file $ingro is missing."
    exit 1
  fi
  # check for wfile
  if [ ! -f "$wfile" ]; then
    echo "###ERROR: Recovery is asked (file $prmfile) but wfile $wfile is missing."
    exit 1
  fi
  sed -i 's/status_lsdmap=.*/status_lsdmap=1/g' $lsdm_prmfile
fi

natoms=$(sed -n '2p' $startgro | tr -d ' ')
nlines=$((natoms+3))

nsteps_line=$(grep -E '^ *nsteps' $mdpfile)
dt_line=$(grep -E '^ *dt' $mdpfile)

nsteps_per_iteration=$(echo $nsteps_line | awk -F' ' '{print $NF}')
time_step=$(echo $dt_line | awk -F' ' '{print $NF}')
iteration_time="$(echo "$nsteps_per_iteration*$time_step" | bc)"
current_time=$startime

backup_idx=1

for idx in `seq 1 $niterations` ; do

  echo -e "Iteration ${idx}: \n" >> $logfile

  # 1) run MD (parameters are in $mdpfile) (input: gmx input files /output: tmp_grofile)
  #source $HOME/experiments/bin/activate
  echo "(1) Compute MD" >> $logfile
  mpiexec -n $nthreads -cpus-per-proc 4 p_mdrun -f $mdpfile -c $ingro -p $topfile -o $tmpgro -t $tmpdir >> $logfile
  echo "" >> $logfile
  #deactivate

#--------------------

  # 2) compute diffusion coordinates (input: xyzfile/ output: dcfile)
  echo "(2) Compute diffusion coordinates" >> $logfile

    ## a) prepare LSDMap
  echo -n "prepare LSDMap..." >> $logfile
  gro2xyz $tmpgro $xyzfile 1 >> /dev/null
  ./prepare_lsdm_gendmd.sh -n $nthreads -p $lsdm_prmfile -x $xyzfile -w $wfile -m $nnfile
  echo "done." >> $logfile

    ## b) calculate the RMSD and nearest neighbor map
  tstart=$(date +%s)
  echo -n "computing the RMSD and nearest neighbors..." >> $logfile
  mpiexec -n $nthreads -cpus-per-proc 4 p_rmsd_neighbor_gendmd < rmsd_neighbor.input > $results_dir/lsdm.log
  ./neighbor/finalize.sh
  tend=$(date +%s)
  echo "done." >> $logfile
  echo "Estimated time for nearest neighbors computation: $(($tend-$tstart))s" >> $logfile

  # generate the espfile of cste local scales
  ./w2csteps.py $epsfile_w $epsfile_cste

    ## c) calculate LSDMap
  tstart=$(date +%s)
  echo -n "computing LSDMap..." >> $logfile
  mpiexec -n $nthreads -cpus-per-proc 4 p_wlsdmap < wlsdmap.input >> $results_dir/lsdm.log
  echo -e "done." >> $logfile
  tend=$(date +%s)
  echo -e "Estimated time for LSDMap computation: $(($tend-$tstart))s \n" >> $logfile

#-----------------------

  # 3) select new points according to diffusion coordinates (input: dcfile / output: ncfile)
  echo "(3) Select new points according to diffusion coordinates" >> $logfile
  python select_new_points.py $dcfile $ncfile --np $nruns >> $logfile
  echo -e "" >> ${logfile}

#-----------------------

  # 4) update Boltzmann weights and write new points into database (input: tmp_grofile, ncfile, wfile / output: wfile, output_grofile)
  echo "(4) Update Boltzmann weights" >> ${logfile}
  if [ $recovery -eq 1 ]; then (cp ${wfile} ${tmpwfile}); fi
  python update_weights.py --max_alive_neighbors 10 $recovery_flag $tmpgro $nnfile $ncfile $tmpwfile $outgro >> $logfile

  echo -e "" >> ${logfile}

#-----------------------

  # 5) compute phi and psi (input: output_grofile / output: xvgfile (phi), xvgfile (psi))

  mv $tmpwfile $wfile
  mv $outgro $ingro

  current_time="$(echo "$current_time+$iteration_time" | bc)"

  if [ $backup_idx = $((nsave-1)) ]; then
    backup_time="$(echo "$current_time+$iteration_time" | bc)"
    backup_time_idx=`echo $backup_time | python -c "print int(float(raw_input()))"`
    cp $wfile $results_dir/${sys}_${backup_time_idx}.w
    cp $ingro $results_dir/input_${backup_time_idx}.gro
  fi

  if [ $backup_idx = $nsave ]; then

    echo "(5) Compute Phi and Psi and save results (t = $backup_time ps)" >> $logfile

    g_chi -phi -psi -all -xvg none -s $tmpgro -f $tmpgro 1>/dev/null 2>/dev/null
    cp phiALA2.xvg $results_dir/phi_${backup_time_idx}.xvg
    cp psiALA2.xvg $results_dir/psi_${backup_time_idx}.xvg

    mv $tmpgro $results_dir/${sys}_${backup_time_idx}.gro
    cp $epsfile_w $results_dir/${sys}_${backup_time_idx}.eps
    cp $ncfile $results_dir/${sys}_${backup_time_idx}.nc
    cp $dcfile $results_dir/${sys}_${backup_time_idx}.ev

    backup_idx=1
  else
    backup_idx=$((backup_idx+1))
  fi

  recovery=1
  recovery_flag=--recovery
  sed -i 's/recovery=.*/recovery=1/g' $prmfile
  sed -i 's/startime=.*/startime='"$current_time"'/g' $prmfile
  sed -i 's/status_lsdmap=.*/status_lsdmap=1/g' $lsdm_prmfile

  mean_eps=$(echo `python -c "import numpy as np; epsfile=open('$epsfile_w','r'); eps = map(float,epsfile.read().splitlines()); print '%.4f' %np.mean(eps)"`)
  sed -i 's/cutoff_nneighbor=.*/cutoff_nneighbor='"$mean_eps"'/g' $lsdm_prmfile


echo -e "---------------------------------------\n" >> ${logfile}
done
