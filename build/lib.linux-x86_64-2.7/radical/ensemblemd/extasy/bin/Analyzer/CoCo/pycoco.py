#!/usr/bin/env python 
from extasy import pcz
from extasy import cofasu
from extasy import script
from extasy import optimizer
from extasy import coco

import logging as log
import sys
import os.path as op
import numpy as np
import argparse

def coco_ui(args):
    '''
    The command line implementation of the CoCo procedure. Should be invoked
    as:
    pyCoCo -i mdfiles -t topfile -o pdbname [-d ndims -n npoints -g gridsize]    
    where:
        mdfiles  is a list of one or more trajectory files
        topfile  is a compatible topology file
        pdbname  is the basename for the pdb files generated by CoCo. There will
                 be npoints of these; if pdbname='out' then they will be called
                 'out0.pdb', 'out1.pdb'... etc up to 'out(npoints-1).pdb'.
        ndims    specifies the number of dimensions (PCs) in the CoCo mapping
                 (default=3).
        npoints  specifies the number of fronteir points to return structures
                 from (default=1)
        gridsize specifies the number of grid points per dimension in the CoCo
                 histogram (default=10)
    '''
    if args.verbosity:
        log.basicConfig(format="%(levelname)s: %(message)s", level=log.DEBUG)
        log.info("Verbose output.")
    else:
        log.basicConfig(format="%(levelname)s: %(message)s")

    log.info('Performing coco analysis!')

    dict = {}
    dict['topfile'] = args.topfile
    dict['mdfiles'] = args.mdfile
    dict['outnamebase'] = args.output
    
    log.info('creating cofasu...')
    f = []
    for trj in dict['mdfiles']:
        f.append(cofasu.Fasu(dict['topfile'],trj))
    
    cf = cofasu.Cofasu(f)

    log.info('cofasu contains ',cf.natoms,' and ',cf.numframes(),' frames')
    # Create the optimizer

    log.info('creating optimizer...')
    o = optimizer.Optimizer(cf, tol=0.01)
    
    log.info('running pcazip...')
    p = pcz.Pcz(cf)
            
    dim = int(args.dims)
    projsSel = np.zeros((p.nframes,dim))
    for i in range(dim):
        projsSel[:,i] = p.proj(i)
    
    # Build the COCO map from the selected projection data.
    coco_instance = coco.Coco(projsSel)
    # Find the COCO points.
    nreps = int(args.frontpoints)
    cp = coco_instance.cpoints(nreps)
    
    for rep in range(nreps):
        dict['rep'] = rep
        # Convert the point to a crude structure.
        e = p.expand(cp[rep,:])
        crude = p.unmap(e)
        # Optimise the crude structure.
        opt = o.optimize(crude, dtol=0.005)
        cf.writepdb('{outnamebase}{rep}.pdb'.format(**dict),opt)
            
################################################################################
#                                                                              #
#                                    ENTRY POINT                               #
#                                                                              #
################################################################################

if __name__ == '__main__':
    parser=argparse.ArgumentParser()
    parser.add_argument('-g','--grid', type=int, default=10, help="Number of points along each dimension of the CoCo histogram")
    parser.add_argument('-d','--dims', type=int, default=3, help='The number of projections to consider from the input pcz file in CoCo; this will also correspond to the number of dimensions of the histogram.')
    parser.add_argument('-n','--frontpoints', type=int, default=1, help="The number of new frontier points to select through CoCo.")
    parser.add_argument('-i','--mdfile', type=str, nargs='*', help='The MD files to process.')
    parser.add_argument('-o','--output', type=str, help='Basename of the pdb files that will be produced.')
    parser.add_argument('-t','--topfile', type=str, help='Topology file.')
    parser.add_argument('-v','--verbosity', nargs='?', help="Increase output verbosity.")
    args=parser.parse_args()
    coco_ui(args)
